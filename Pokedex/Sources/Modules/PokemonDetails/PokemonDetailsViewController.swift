//
//  PokemonDetailsViewController.swift
//  Pokedex
//
//  Created Alexis Schultz on 03/08/2017.
//  Copyright © 2017 Alexis Schultz. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Whisper

class PokemonDetailsViewController: UIViewController, PokemonDetailsViewProtocol
{
	var presenter: PokemonDetailsPresenterProtocol?
    var pokemon : Pokemon?
    {
        didSet
        {
            title = pokemon?.name
            pokemonDetailsTableView.reloadData()
        }
    }

    @IBOutlet weak var pokemonDetailsTableView: UITableView!
    {
        didSet
        {
            pokemonDetailsTableView.register(UINib(nibName: "PokemonImageCell", bundle: Bundle.main), forCellReuseIdentifier: "PokemonImageCell")
            pokemonDetailsTableView.register(UINib(nibName: "PokemonTypeCell", bundle: Bundle.main), forCellReuseIdentifier: "PokemonTypeCell")
            pokemonDetailsTableView.register(UINib(nibName: "PokemonStatCell", bundle: Bundle.main), forCellReuseIdentifier: "PokemonStatCell")
            pokemonDetailsTableView.rowHeight = UITableViewAutomaticDimension
            pokemonDetailsTableView.estimatedRowHeight = 50
            pokemonDetailsTableView.tableFooterView = UIView()
        }
    }

	override func viewDidLoad()
    {
        super.viewDidLoad()
        title = "Loading pokemon details"
        navigationItem.rightBarButtonItem = saveButton
        presenter?.viewDidLoad()
    }

    func update(_ pokemon : Pokemon)
    {
        self.pokemon = pokemon
        saveButton.isEnabled = true
    }

    lazy var saveButton : UIBarButtonItem =
    {
        let button = UIBarButtonItem(title: "Save", style: .plain, target: self, action: #selector(didTouchSaveButton))
        button.isEnabled = false
        return button
    }()

    @objc func didTouchSaveButton()
    {
        guard let pokemon = pokemon else { return }
        presenter?.performSave(pokemon)
    }

    func show(_ message : String, isError : Bool)
    {
        var murmur = Murmur(title: message)
        murmur.backgroundColor = isError ? .red : .white
        murmur.titleColor = isError ? .white : .black
        Whisper.show(whistle: murmur, action: .show(2))
    }
}

extension PokemonDetailsViewController : UITableViewDataSource
{
    func numberOfSections(in tableView: UITableView) -> Int
    {
        return 3
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        switch section {
        case 0: return pokemon?.imageUrl != nil ? 1 : 0
        case 1: return pokemon?.types.count ?? 0
        case 2: return pokemon?.stats.count ?? 0
        default: return 0
        }
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        switch indexPath.section
        {
        case 0:
            let cell = pokemonDetailsTableView.dequeueReusableCell(withIdentifier: "PokemonImageCell") as? PokemonImageCell
            guard let pokemon = pokemon else { return cell! }
            presenter?.getImage(for: pokemon, successCallBack:
            {
                (image) in
                cell?.imageView?.image = image
            })
            return cell!
        case 1:
            let cell = pokemonDetailsTableView.dequeueReusableCell(withClass: PokemonTypeCell.self)
            cell?.typeName = pokemon?.types[indexPath.row].name
            return cell!
        case 2:
            let cell = pokemonDetailsTableView.dequeueReusableCell(withClass: PokemonStatCell.self)
            cell?.statName = pokemon?.stats[indexPath.row].name
            cell?.statBaseValue = pokemon?.stats[indexPath.row].baseValue
            return cell!
        default: fatalError("Bad cell requested")
        }
    }

    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String?
    {
        guard pokemon != nil else { return nil }
        switch section
        {
        case 1: return "Types :"
        case 2: return "Stats :"
        default: return nil
        }
    }
}
