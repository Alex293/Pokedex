//
//  PokemonDetailsInteractor.swift
//  Pokedex
//
//  Created Alexis Schultz on 03/08/2017.
//  Copyright © 2017 Alexis Schultz. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

enum PokemonDetailsError : Error
{
    case noUrl
    case noContent
}

class PokemonDetailsInteractor: PokemonDetailsInteractorInputProtocol
{
    weak var presenter: PokemonDetailsInteractorOutputProtocol?

    func loadPokemon(from url : String, successCallBack : PokemonLoadingSuccessCallback?, failureCallback : PokemonLoadingFailureCallback?)
    {
        pokeAPI.resource(for: url).addObserver(owner: self)
        {
            (resource, event) in
            switch event
            {
            case .newData(_) :
                let result : PokemonDetails = resource.typedContent(ifNone: (id : 0, name : "Default name", imageUrl : "None", stats : [],  types: []))
                successCallBack?(Pokemon(details: result))
            case .error :
                guard let error = resource.latestError else { return }
                failureCallback?(error)
            default : break
            }
        }.load()
    }
    
    func loadLocalImage(for pokemon : Pokemon) -> UIImage?
    {
        return FileManager.shared.getLocalImage(for: pokemon)
    }

    func loadDistantImage(for pokemon : Pokemon, successCallBack : PokemonImageLoadingSuccessCallback?, failureCallback : PokemonImageLoadingFailureCallback?)
    {
        guard let imageUrl = pokemon.imageUrl else { failureCallback?(PokemonDetailsError.noUrl) ; return }
        pokeAPI.resource(for: imageUrl).request(.get)
        .onSuccess(
        {
            (entity) in
            guard let image : UIImage = entity.typedContent(ifNone: nil) else
            {
                failureCallback?(PokemonDetailsError.noContent)
                return
            }
            successCallBack?(image)
        })
        .onFailure
        {
            (error) in
            failureCallback?(error)
        }
    }

    func save(_ pokemon: Pokemon)
    {
        _ = try? DatabaseProvider.shared.insert(pokemon)
    }
}

