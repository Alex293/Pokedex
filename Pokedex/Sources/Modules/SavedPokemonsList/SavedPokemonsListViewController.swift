//
//  SavedPokemonsListViewController.swift
//  Pokedex
//
//  Created Alexis Schultz on 03/08/2017.
//  Copyright © 2017 Alexis Schultz. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift

class SavedPokemonsListViewController: UIViewController, SavedPokemonsListViewProtocol
{
	var presenter: SavedPokemonsListPresenterProtocol?
    var savedPokemons : Results<Pokemon>?
    var notificationToken: NotificationToken?

    @IBOutlet weak var savedPokemonTableView: UITableView!
    {
        didSet
        {
            savedPokemonTableView.register(Cell.self, forCellReuseIdentifier: "cell")
        }
    }

    override func viewDidLoad()
    {
        super.viewDidLoad()
        savedPokemons = presenter?.getSavedPokemons()
        notificationToken = presenter?.getSavedPokemons()?.addNotificationBlock
        {
            (changes: RealmCollectionChange) in
            switch changes
            {
            case .initial:
                // Results are now populated and can be accessed without blocking the UI
                self.savedPokemonTableView.reloadData()
                break
            case .update(_, let deletions, let insertions, let modifications):
                // Query results have changed, so apply them to the TableView
                self.savedPokemonTableView.beginUpdates()
                self.savedPokemonTableView.insertRows(at: insertions.map { IndexPath(row: $0, section: 0) }, with: .automatic)
                self.savedPokemonTableView.deleteRows(at: deletions.map { IndexPath(row: $0, section: 0) }, with: .automatic)
                self.savedPokemonTableView.reloadRows(at: modifications.map { IndexPath(row: $0, section: 0) }, with: .automatic)
                self.savedPokemonTableView.endUpdates()
                break
            case .error(let err):
                // An error occurred while opening the Realm file on the background worker thread
                fatalError("\(err)")
                break
            }
        }
    }

    override func viewDidAppear(_ animated: Bool)
    {
        tabBarController?.navigationItem.title = "Saved pokemons"
    }
}

extension SavedPokemonsListViewController : UITableViewDataSource
{
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
    {
        return savedPokemons?.count ?? 0
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
    {
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! Cell
        let pokemon = savedPokemons![indexPath.row]
        cell.textLabel?.text = pokemon.name
        cell.detailTextLabel?.text = String(pokemon.id)
        return cell
    }

    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath)
    {
        guard editingStyle == .delete, let pokemon = savedPokemons?[indexPath.row] else { return }
        presenter?.performUnsave(pokemon)
    }

}

extension SavedPokemonsListViewController : UITableViewDelegate
{
    func tableView(_ tableView: UITableView, shouldHighlightRowAt indexPath: IndexPath) -> Bool
    {
        print(indexPath)
        guard let pokemon = savedPokemons?[indexPath.row] else { return false }
        print(pokemon)
        presenter?.didSelect(pokemon)
        return false
    }
}

class Cell: UITableViewCell {
    override init(style: UITableViewCellStyle, reuseIdentifier: String!) {
        super.init(style: .subtitle, reuseIdentifier: reuseIdentifier)
    }

    required init(coder: NSCoder) {
        fatalError("NSCoding not supported")
    }
}
